// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bensooraj/griffon/mocks (interfaces: StartupScriptService)
//
// Generated by this command:
//
//	mockgen -destination=StartupScriptService.go -package=mocks github.com/bensooraj/griffon/mocks StartupScriptService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	govultr "github.com/vultr/govultr/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockStartupScriptService is a mock of StartupScriptService interface.
type MockStartupScriptService struct {
	ctrl     *gomock.Controller
	recorder *MockStartupScriptServiceMockRecorder
}

// MockStartupScriptServiceMockRecorder is the mock recorder for MockStartupScriptService.
type MockStartupScriptServiceMockRecorder struct {
	mock *MockStartupScriptService
}

// NewMockStartupScriptService creates a new mock instance.
func NewMockStartupScriptService(ctrl *gomock.Controller) *MockStartupScriptService {
	mock := &MockStartupScriptService{ctrl: ctrl}
	mock.recorder = &MockStartupScriptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartupScriptService) EXPECT() *MockStartupScriptServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStartupScriptService) Create(arg0 context.Context, arg1 *govultr.StartupScriptReq) (*govultr.StartupScript, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*govultr.StartupScript)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockStartupScriptServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStartupScriptService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockStartupScriptService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStartupScriptServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStartupScriptService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockStartupScriptService) Get(arg0 context.Context, arg1 string) (*govultr.StartupScript, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*govultr.StartupScript)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStartupScriptServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStartupScriptService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockStartupScriptService) List(arg0 context.Context, arg1 *govultr.ListOptions) ([]govultr.StartupScript, *govultr.Meta, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]govultr.StartupScript)
	ret1, _ := ret[1].(*govultr.Meta)
	ret2, _ := ret[2].(*http.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// List indicates an expected call of List.
func (mr *MockStartupScriptServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStartupScriptService)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockStartupScriptService) Update(arg0 context.Context, arg1 string, arg2 *govultr.StartupScriptReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStartupScriptServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStartupScriptService)(nil).Update), arg0, arg1, arg2)
}
