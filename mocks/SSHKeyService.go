// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bensooraj/griffon/mocks (interfaces: SSHKeyService)
//
// Generated by this command:
//
//	mockgen -destination=SSHKeyService.go -package=mocks github.com/bensooraj/griffon/mocks SSHKeyService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	govultr "github.com/vultr/govultr/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockSSHKeyService is a mock of SSHKeyService interface.
type MockSSHKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockSSHKeyServiceMockRecorder
}

// MockSSHKeyServiceMockRecorder is the mock recorder for MockSSHKeyService.
type MockSSHKeyServiceMockRecorder struct {
	mock *MockSSHKeyService
}

// NewMockSSHKeyService creates a new mock instance.
func NewMockSSHKeyService(ctrl *gomock.Controller) *MockSSHKeyService {
	mock := &MockSSHKeyService{ctrl: ctrl}
	mock.recorder = &MockSSHKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHKeyService) EXPECT() *MockSSHKeyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSSHKeyService) Create(arg0 context.Context, arg1 *govultr.SSHKeyReq) (*govultr.SSHKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*govultr.SSHKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockSSHKeyServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSSHKeyService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSSHKeyService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSSHKeyServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSSHKeyService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSSHKeyService) Get(arg0 context.Context, arg1 string) (*govultr.SSHKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*govultr.SSHKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockSSHKeyServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSSHKeyService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockSSHKeyService) List(arg0 context.Context, arg1 *govultr.ListOptions) ([]govultr.SSHKey, *govultr.Meta, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]govultr.SSHKey)
	ret1, _ := ret[1].(*govultr.Meta)
	ret2, _ := ret[2].(*http.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// List indicates an expected call of List.
func (mr *MockSSHKeyServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSSHKeyService)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockSSHKeyService) Update(arg0 context.Context, arg1 string, arg2 *govultr.SSHKeyReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSSHKeyServiceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSSHKeyService)(nil).Update), arg0, arg1, arg2)
}
